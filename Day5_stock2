class Solution {
   public int maxProfit(int[] p) {
    int n = p.length;
    int[][] dp = new int[n + 1][2];
    for (int i = 0; i <= n; i++) {
        for (int j = 0; j < 2; j++) {
            dp[i][j] = -1;
        }
    }
    return prof(0, p, 1, dp, n);
}

public static int prof(int i, int[] p, int buy, int[][] dp, int n) {
    if (i == n) {
        return 0;
    }
    if (dp[i][buy] != -1) {
        return dp[i][buy];
    }

    int pr = 0;
    if (buy == 1) {
        pr = Math.max(-p[i] + prof(i + 1, p, 0, dp, n), prof(i + 1, p, 1, dp, n));
    } else {
        pr = Math.max(p[i] + prof(i + 1, p, 1, dp, n), prof(i + 1, p, 0, dp, n));
    }

    dp[i][buy] = pr;
   return dp[i][buy];
}
}

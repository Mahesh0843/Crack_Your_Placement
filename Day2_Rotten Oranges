class Pair{
    int f;
    int s;
    int df;
    Pair(int ff,int ss,int tt)
    {
        f=ff;
        s=ss;
        df=tt;
    }
}
class Solution
{
    //Function to find minimum time required to rot all oranges. 
    static int[] dr={-1,0,1,0};
    static int[] dc={0,1,0,-1};
    public int orangesRotting(int[][] grid)
    {
        // Code here
        int n=grid.length;
        int m=grid[0].length;
        int[][] vis=new int[n][m];
        Queue<Pair> q=new LinkedList<>();
         int c=0;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                vis[i][j]=grid[i][j];
                if(grid[i][j]==2)
                {
                    q.offer(new Pair(i,j,0));
                }
                if(grid[i][j]==1)
                {
                    c++;
                }
            }
        }
        int cn=0;
        int mini=0;
        while(!q.isEmpty())
        {
            Pair t=q.poll();
            int ni=t.f;
            int nj=t.s;
            int nt=t.df;
            mini=Math.max(mini,nt);
            for(int i=0;i<4;i++)
            {
                int nr=ni+dr[i];
                int nc=nj+dc[i];
                if(nr>=0 && nr<n && nc>=0 && nc<m && grid[nr][nc]==1 && vis[nr][nc]==1)
                {
                    q.offer(new Pair(nr,nc,nt+1));
                    vis[nr][nc]=2;
                    cn++;
                }
            }
        }
       if(cn!=c)
       {
           return -1;
       }
        return mini;
    }
}

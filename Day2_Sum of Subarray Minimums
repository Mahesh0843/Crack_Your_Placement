class Solution {
    public int sumSubarrayMins(int[] arr) {
        int m = (int)1e9+7;
        int n = arr.length;
        Stack<Integer> t = new Stack<>();
        int[] ns = fns(arr, n);
        int[] ps = fps(arr, n);
        long st = 0;
        for (int i = 0; i < n; i++) {
            int l = i - ps[i];
            int r = ns[i] - i;
            st = (st + (long) l * r * arr[i]) % m;
        }
        return (int) st;
    }

    public static int[] fns(int[] arr, int n) {
        Stack<Integer> t = new Stack<>();
        int[] ns = new int[n];
        for (int i = n - 1; i >= 0; i--) {
            while (!t.isEmpty() && arr[t.peek()] >= arr[i]) {
                t.pop();
            }
            ns[i] = t.isEmpty() ? n : t.peek();
            t.push(i);
        }
        return ns;
    }

    public static int[] fps(int[] arr, int n) {
        Stack<Integer> t = new Stack<>();
        int[] ps = new int[n];
        for (int i = 0; i < n; i++) {
            while (!t.isEmpty() && arr[t.peek()] > arr[i]) {
                t.pop();
            }
            ps[i] = t.isEmpty() ? -1 : t.peek();
            t.push(i);
        }
        return ps;
    }
}
